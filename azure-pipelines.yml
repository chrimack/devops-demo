trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  loop: for i in {1..10}; do echo "doing stuff..."; sleep .5; done;

stages:
  - stage: Dependencies
    displayName: Dependencies
    jobs:
      - job: Dependencies
        displayName: Install frontend dependencies
        steps:

          - bash: |
              echo 'npm ci'
              ${{ variables.loop }}
              echo 'file contents' > $(Build.ArtifactStagingDirectory)/app.txt
            displayName: Install frontend dependencies

          - publish: $(Build.ArtifactStagingDirectory)/app.txt
            artifact: app
            displayName: Publish installed dependencies artifact

  - stage: FrontendTest
    displayName: Frontend tests
    dependsOn: Dependencies
    jobs:
      - job: FrontendTest
        displayName: Run frontend tests
        steps:

          - download: current
            artifact: app
            displayName: Download frontend artifact

          - bash: |
              echo 'npm run test'
              ${{ variables.loop }}
            displayName: Run frontend tests
  
  - stage: FrontendBuild
    displayName: Frontend build
    dependsOn: Dependencies
    jobs:
      - job: FrontendBuild
        displayName: Build frontend
        steps:

          - download: current
            artifact: app
            displayName: Download frontend artifact

          - bash: |
              cat $(Pipeline.Workspace)/app.txt
              echo 'npm run build'
              ${{ variables.loop }}
              echo 'build stuff' > $(Build.ArtifactStagingDirectory)/build.txt
            displayName: Build frontend
          
          - publish: $(Build.ArtifactStagingDirectory)/build.txt
            artifact: build
            displayName: Publish build artifact

  - stage: StageFour
    displayName: Stage four
    dependsOn:
    - FrontendTest
    - FrontendBuild
    jobs:
      - deployment: DeployFrontend
        displayName: Build frontend
        environment: nfpa-link-working
        strategy:
          runOnce:
            deploy:
              steps:
                
                - download: current
                  artifact: build
                  displayName: Download build artifact
                
                - bash: cat $(Pipeline.Workspace)/build.txt
